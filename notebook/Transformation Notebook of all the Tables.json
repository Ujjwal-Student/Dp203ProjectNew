{
	"name": "Transformation Notebook of all the Tables",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "capstonespark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a0c909be-7fa2-4895-99f3-8cb5e7229aae"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e987e904-bc34-4ae9-b4b3-8978e331d3f3/resourceGroups/dp203CapstoneProject/providers/Microsoft.Synapse/workspaces/dp203synaspe101/bigDataPools/capstonespark",
				"name": "capstonespark",
				"type": "Spark",
				"endpoint": "https://dp203synaspe101.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/capstonespark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\n",
					"val df3 = spark.read.synapsesql(\"dedicatedsqlcapstone.dbo.CapstoneSalesCSV\") \n",
					"val df1 = spark.read.synapsesql(\"dedicatedsqlcapstone.dbo.CapstoneSalesJson\")\n",
					"val df2 = spark.read.synapsesql(\"dedicatedsqlcapstone.dbo.CapstoneSalesParquet\")\n",
					"//df.write.mode(\"overwrite\").saveAsTable(\"default.t1\")"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import org.apache.spark.sql.SparkSession\r\n",
					"import org.apache.spark.sql.functions._\r\n",
					"\r\n",
					"var df=df1.union(df2).union(df3)\r\n",
					"df.show(5)"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"val resultdf = df.withColumn(\"quantity\", when(col(\"quantity\").isNull,col(\"total_amount\")/col(\"price\")).otherwise(col(\"quantity\")))\r\n",
					"resultdf.show(10)"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"val resultdf1 = resultdf.withColumn(\"price\", when(col(\"price\").isNull,col(\"total_amount\")/col(\"quantity\")).otherwise(col(\"price\")))\r\n",
					"resultdf1.show(10)"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"val resultdf2 = resultdf1.withColumn(\"total_amount\", when(col(\"total_amount\").isNull,col(\"price\")*col(\"quantity\")).otherwise(col(\"total_amount\")))\r\n",
					"resultdf2.show(10)"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"var result_df = resultdf2.withColumn(\"Clean_Date\", split(col(\"sale_date\"), \" \").getItem(0))\r\n",
					"//Creating year column from sale date\r\n",
					"result_df = result_df.withColumn(\"Year_Date\", split(col(\"Clean_Date\"), \"-\").getItem(0))\r\n",
					"//Rounding amount to 2 decimal places\r\n",
					"result_df = result_df.withColumn(\"total_amount\", bround(col(\"total_amount\"), 2))\r\n",
					"result_df = result_df.orderBy(\"sale_id\")"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"result_df.show(5)"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"val New_Path = \"abfss://files@dp203capstonestorage101.dfs.core.windows.net/TranformedDataFolder/Output_Data.csv\"\r\n",
					"\r\n",
					"// Write DataFrame to ADLS in CSV format\r\n",
					"df.write\r\n",
					"  .format(\"csv\")\r\n",
					"  .option(\"header\", \"true\")\r\n",
					"  .mode(\"overwrite\")\r\n",
					"  .save(New_Path)"
				],
				"execution_count": 40
			}
		]
	}
}